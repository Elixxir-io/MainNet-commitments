// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package messages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{0}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Commitment struct {
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
	IDF                  []byte   `protobuf:"bytes,2,opt,name=IDF,proto3" json:"IDF,omitempty"`
	Wallet               string   `protobuf:"bytes,3,opt,name=Wallet,proto3" json:"Wallet,omitempty"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{1}
}

func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Commitment.Unmarshal(m, b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Commitment.Marshal(b, m, deterministic)
}
func (m *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(m, src)
}
func (m *Commitment) XXX_Size() int {
	return xxx_messageInfo_Commitment.Size(m)
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

func (m *Commitment) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *Commitment) GetIDF() []byte {
	if m != nil {
		return m.IDF
	}
	return nil
}

func (m *Commitment) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

func (m *Commitment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Ack)(nil), "messages.Ack")
	proto.RegisterType((*Commitment)(nil), "messages.Commitment")
}

func init() {
	proto.RegisterFile("messages.proto", fileDescriptor_4dc296cbfe5ffcd5)
}

var fileDescriptor_4dc296cbfe5ffcd5 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xa4,
	0xb9, 0x98, 0x1d, 0x93, 0xb3, 0x85, 0x44, 0xb8, 0x58, 0x5d, 0x8b, 0x8a, 0xf2, 0x8b, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0xa5, 0x12, 0x2e, 0x2e, 0xe7, 0xfc, 0xdc, 0xdc, 0xcc,
	0x92, 0xdc, 0xd4, 0xbc, 0x12, 0x21, 0x39, 0x2e, 0xae, 0x80, 0xa2, 0xcc, 0xb2, 0xc4, 0x92, 0x54,
	0xef, 0xd4, 0x4a, 0xb0, 0x42, 0x9e, 0x20, 0x24, 0x11, 0x21, 0x01, 0x2e, 0x66, 0x4f, 0x17, 0x37,
	0x09, 0x26, 0xb0, 0x04, 0x88, 0x29, 0x24, 0xc6, 0xc5, 0x16, 0x9e, 0x98, 0x93, 0x93, 0x5a, 0x22,
	0xc1, 0x0c, 0x36, 0x16, 0xca, 0x13, 0x92, 0xe1, 0xe2, 0x0c, 0xce, 0x4c, 0xcf, 0x4b, 0x2c, 0x29,
	0x2d, 0x4a, 0x95, 0x60, 0x01, 0xab, 0x47, 0x08, 0x18, 0xd9, 0x71, 0x71, 0x23, 0x6c, 0x2d, 0x16,
	0xd2, 0xe7, 0x62, 0x0b, 0x4b, 0x2d, 0xca, 0x4c, 0xab, 0x14, 0x12, 0xd1, 0x83, 0x7b, 0x03, 0xa1,
	0x40, 0x8a, 0x17, 0x21, 0xea, 0x98, 0x9c, 0xad, 0xc4, 0xe0, 0xa4, 0x18, 0x25, 0x9f, 0x9e, 0x59,
	0xa2, 0x57, 0x51, 0xa1, 0x97, 0x97, 0x5a, 0x52, 0x9e, 0x5f, 0x94, 0xad, 0x9f, 0x9a, 0x93, 0x59,
	0x51, 0x91, 0x59, 0xa4, 0x0f, 0x53, 0x98, 0xc4, 0x06, 0x0e, 0x06, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x75, 0x76, 0xde, 0x18, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommitmentsClient is the client API for Commitments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitmentsClient interface {
	Verify(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*Ack, error)
}

type commitmentsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitmentsClient(cc grpc.ClientConnInterface) CommitmentsClient {
	return &commitmentsClient{cc}
}

func (c *commitmentsClient) Verify(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/messages.Commitments/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitmentsServer is the server API for Commitments service.
type CommitmentsServer interface {
	Verify(context.Context, *Commitment) (*Ack, error)
}

// UnimplementedCommitmentsServer can be embedded to have forward compatible implementations.
type UnimplementedCommitmentsServer struct {
}

func (*UnimplementedCommitmentsServer) Verify(ctx context.Context, req *Commitment) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterCommitmentsServer(s *grpc.Server, srv CommitmentsServer) {
	s.RegisterService(&_Commitments_serviceDesc, srv)
}

func _Commitments_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commitment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitmentsServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Commitments/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitmentsServer).Verify(ctx, req.(*Commitment))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commitments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Commitments",
	HandlerType: (*CommitmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Commitments_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}
